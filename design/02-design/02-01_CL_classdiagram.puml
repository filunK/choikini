@startuml 全体クラス図

    routing -- commons
    procedure -- commons
    dao -- commons
    Application -- commons
    package commons <<Frame>> {
        class Logger as "ロガー" {
            +{static} void 初期化()
            +{static} Handler ExpressJSロガー設定()
            
            +{static} void アクセスログInfo出力()
            +{static} void アクセスログWarning出力()
            +{static} void アクセスログError出力()
            +{static} void システムログInfo出力()
            +{static} void システムログWarning出力()
            +{static} void システムログError出力()
            +{static} void 警告ログ出力()
            
        }
        
        class ユーティリティ {
            +{static} T config取得<T>(キー: string)
            +{static} boolean 利用可能性判定<T>(変数: T)

        }

        class 認証 {
            +{static} string SALT文字列長
            +{static} string SALTに使用する文字羅列
            +{static} string SALT生成()
            +{static} string パスワード妥当性検証(リクエストパスワード: string, リクエストSALT: string, 正パスワード: string)
            +{static} boolean ワンタイムトークン生成(User)

            +{static} string ハッシュ化(アルゴリズム名: string, シード値: string)
            +{static} string 暗号化(アルゴリズム名: string, SALT値: string シード値: string)
        }

    }
    
    
    class Application as "エントリポイント" {
        +void run()
        -void configure(Express.Application app)
        -void route(Express.Application app)
    }

    package routing <<Frame>> {

        Application -- IRoutable
        interface IRoutable {
            +void ルート登録()

        }

        IRoutable <|.. RouteBase
        abstract class RouteBase as "基礎ルータ" {
            #{abstract}Path: string
            #{abstract}void ルータ設定(ルータ： Express.Router)
        }

        RouteBase <|-- UserAction
        class UserAction {
            -[PUT]/login()
        }

        RouteBase <|-- ChoikiniAction
        class ChoikiniAction {
            -[POST]/choikini/:user()
            -[GET]/choikini/:user()
            -[GET]/choikini()
        }
        
    }
    
    package procedure <<Frame>> {

        UserAction -- IProcedure
        ChoikiniAction -- IProcedure
        interface IProcedure as "処理" {
            +Promise<Y> 処理(入力: T)
        }

        IProcedure <|.. LoginProcedure
        class LoginProcedure as "ログイン" {
        }
        
        IProcedure <|.. GetChoikiniProcedure
        class GetChoikiniProcedure as "ちょい気に取得" {
        }

        IProcedure <|.. RegistChoikiniProcedure
        class RegistChoikiniProcedure as "ちょい気に登録" {
        }

        IProcedure <|.. GetChoikiniAllProcedure
        class GetChoikiniAllProcedure as "全ちょい気に取得" {
        }

    }
    
    
    
    package dao <<Frame>> {

        LoginProcedure -- Dao
        GetChoikiniProcedure -- Dao
        RegistChoikiniProcedure -- Dao
        GetChoikiniAllProcedure -- Dao
        interface Dao as "DAO" {
            +ユーザ情報取得()
            +ログイン処理()
            +ログオフ処理()
            +ちょい気に登録()
            +ちょい気に取得()
            
        }

        interface IUser as "ユーザドキュメント" {
            + _id
            + Name
            + Password {Salt, Encrypted}
            + Token
            + Auth
            + ChoikiniList: IChoikiniList
        }

        interface IChoikiniList as "ちょい気にリストドキュメント" {
            + _id
            + UserId
            + Choikinis: {EntryDate, Entry}
        }

        Dao <|.. MongoDao
        class MongoDao {
            - コネクション
            - Userスキーマ
            - ChoikiniListスキーマ
            * トークン更新()
            - ユーザモデル生成()
            - ちょい気にリストモデル生成()
        }

    }
    
    package objectModels <<Frame>> {
        enum userAuthType as "ユーザ権限" {
            USUAL = 0
            HIGH = 5
            ADMINISTRATOR = 99
        }

        userAuthType -[hidden]down-- User
        together {
            class User as "ユーザ" {
                + ユーザ名:string
                + パスワード:string
                + ユーザトークン:string
                + ユーザ権限:ユーザ情報
                + ちょい気に:List
            }

            userAuthType -[hidden]--> ChoikiniList
            class ChoikiniList as "ちょい気にリスト" {
                + Id
                + ちょい気にリスト: ChoikiniEntity[]
            }

            ChoikiniList -- ChoikiniEntity
            class ChoikiniEntity as "ちょい気にエンティティ" {
                + 日時
                + ちょい気に本文
            }

            class ChoikiniRegistInfo as "ちょい気に登録情報" {
                + ユーザ
                + ちょい気にエンティティ
            }

        }

        together {
            class Hal as "HALフォーマット" {
                + _links
                + _emdbed : HalEmbedded
            }

            class HalEmbedded as "HAL-Emdbed領域" {
                + レスポンス状態
                + レスポンス状態詳細
                + レスポンス本体
            }

            class LoginJSON as "HAL-ログイン処理後情報" {
                + token
            }

            class ChoikiniJSON as "HAL-ちょい気に情報" {
                + user
                + choikiniList: ChoikiniEntity[]
            }

            class UpsertResultJSON as "HAL-更新結果" {
                + isProcessed
            }

        }
    }



@enduml
